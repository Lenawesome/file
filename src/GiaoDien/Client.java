/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GiaoDien;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.FileInfo;
import model.JoinFile;
import model.ServerDirectory;
import model.SplitFile;

/**
 *
 * @author MyPC
 */
public class Client extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    private File[] rootFile;
    private File[] listFile;
    File[] listFiles2;
    private DefaultTableModel model1;
    private DefaultTableModel model2;
    private Socket clientSocket;
    private JoinFile jFile  = new JoinFile();
    private String downloadDes = "client\\";
    
    private String hostName = "localhost";
    private int port = 2001;
    
    public WindowListener listener = new WindowAdapter() {
        @Override
        public void windowClosing(WindowEvent e) {
            super.windowClosing(e);
            int result = JOptionPane.showConfirmDialog(null,"DO YOU WANT CLOSE SERVER ?","EXIT SYSTEM",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION){
                System.exit(0);
                
            }

        }
    };
    public Client() {
        initComponents();
//        initConnection();
        addWindowListener(listener);
        initTable();
        initRoot();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Size"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Size"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jLabel1.setText("Client");

        jLabel2.setText("Server");

        jButton1.setText("Download");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Upload");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Dive Into");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Root");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Connect");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(153, 153, 153))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(50, 50, 50)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5)))
                .addGap(108, 108, 108))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        sendDownloadRequest();
//        receiveFile();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int rowSelected = jTable1.getSelectedRow();
        if(rowSelected != -1){
            String path = model1.getValueAt(rowSelected, 0).toString();
            try {
                diveInto(path);
            }catch (IOException ex) {
            System.out.println(ex);
        }
        }
       
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        model1.setRowCount(0);
        initRoot();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DataOutputStream dos;
        try {
            int rowSelected = jTable1.getSelectedRow();
            if(rowSelected != -1){
                String path = model1.getValueAt(rowSelected, 0).toString();
                dos = new DataOutputStream(clientSocket.getOutputStream());
                dos.writeUTF("Upload");
                upload(path);
            }
            
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
//        } finally {
//            try {
////                dos.close();
//            } catch (IOException ex) {
//                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
//            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        initConnection();
        receiveFromServer();
    }//GEN-LAST:event_jButton5ActionPerformed

    public void upload(String path) {
        for (File f : listFile) {
            if (f.getName().equals(path) && f.isFile()) {
                sendToServer(f);
            }
        }
    }

    public boolean diveInto(String path) throws IOException {
//        for(int i = 0; i < listFile.length; i ++){
//            if(path.equals(listFile[i].get))
//        }
//        return true;
        for (File f : listFile) {
            if (f.getAbsolutePath().contains(path)) {
                if (f.isDirectory()) {
                    model1.setRowCount(0);
                    File[] list = f.listFiles();
                    Object[] row = new Object[2];
                    if (list != null) {
                        listFile = list;
                        for (File file : list) {
                            row[0] = file.getName();
                            if (file.isFile()) {
                                row[1] = file.length();
                            }
                            model1.addRow(row);
                            System.out.println(file.getCanonicalPath());
                            //                    diveInto(f.getCanonicalPath());
                        }
                    }
                } else {
                    return false;
                }
            }
        }

        return true;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables

    private void initRoot() {
        rootFile = File.listRoots();
        Object[] row = new Object[2];
        for (int i = 0; i < rootFile.length; i++) {
            row[0] = rootFile[i].getAbsolutePath();
//            row[1] = rootFile[i].length();
            model1.addRow(row);
        }
        listFile = rootFile;
    }
    
    private void initTable() {
        model1 = (DefaultTableModel) jTable1.getModel();
        model2 = (DefaultTableModel) jTable2.getModel();
    }

    private void sendToServer(File f) {
        
        SplitFile splitFile = new SplitFile();
        try {
            System.out.println(splitFile.splitFile(f.getAbsolutePath(), 1024 * 300, clientSocket));
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initConnection() {
        try {
            clientSocket = new Socket(hostName, port);
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void receiveFromServer() {
        try {
            model2.setRowCount(0);
            ObjectInputStream ois = new ObjectInputStream(clientSocket.getInputStream());
            ServerDirectory listDirectory = (ServerDirectory) ois.readObject();
            Object[] row = new Object[2];
            listFiles2 = listDirectory.getListFiles();
            for (int i = 0; i < listFiles2.length; i++) {
                row[0] = listFiles2[i].getName();
                
//            row[1] = rootFile[i].length();
                model2.addRow(row);
            }
            
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void sendDownloadRequest() {
        DataOutputStream dos = null;
        try {
            int rowSelected1 = jTable1.getSelectedRow();
            if(rowSelected1 != -1){
                String desName = model1.getValueAt(rowSelected1, 0).toString();
                for(File f : listFile){
                    if(f.getName().equals(desName)){
                        downloadDes = f.getAbsolutePath();
                        downloadDes = downloadDes+"\\";
                    }
                }
            }
            
            System.out.println(downloadDes);
            
//            DataInputStream dis = new DataInputStream(clientSocket.getInputStream());
//            System.out.println(dis.readUTF());
            
            int rowSelected2 = jTable2.getSelectedRow();
            if(rowSelected2 != -1){
                dos = new DataOutputStream(clientSocket.getOutputStream());
                dos.writeUTF("Download");
                String path = model2.getValueAt(rowSelected2, 0).toString();
                for (File f : listFiles2) {
                    if (f.getName().equals(path)) {
                        dos.writeUTF(f.getAbsolutePath());
                        break;
    //                    dos.flush();
                    }
                }
                receiveFile();
            }
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

       private void receiveFile() {
        ObjectInputStream ois;
            try {
                ois = new ObjectInputStream(clientSocket.getInputStream());
                FileInfo fileInfo = (FileInfo) ois.readObject();
                System.out.println(fileInfo.getPiecesOfFile());
                InputStream is = clientSocket.getInputStream();
                byte[] arr = new byte[1024*300];
                for (int i = 1; i <= fileInfo.getPiecesOfFile(); i++) {
                    int j = 0;
                    long a = 0;
    //                OutputStream os = new FileOutputStream(dest + sourceFile.getName() + "." + i);
                    OutputStream os = new FileOutputStream(downloadDes + fileInfo.getFileName()+ "." + i);
                    while ((j = is.read(arr)) != -1) {
                        os.write(arr, 0, j);
                        a += j;
                        if (a >= fileInfo.getPartLength()) {
                            break;
                        }
                    }
                    System.out.println("file cắt được "+fileInfo.getFileName()+"."+i);
                    os.flush();
                    os.close();
                }
                
                jFile.joinFile(downloadDes+fileInfo.getFileName()+".1");
            } catch (IOException ex) {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
//                try {
//                    ois.close();
//                } catch (IOException ex) {
//                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
//                }
            }
    }
}
