/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GiaoDien;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.FileInfo;
import model.JoinFile;
import model.ServerDirectory;
import model.SplitFile;

/**
 *
 * @author MyPC
 */
public class Server extends javax.swing.JFrame implements Runnable{

    /**
     * Creates new form Server
     */
    JoinFile jFile = new JoinFile();
    String des = "server\\";
    private ServerSocket server;
    private DefaultTableModel model;
    private Socket clientSocket;
    
    private File serverStorage = new File("server");
    File[] listFiles = serverStorage.listFiles();
    public WindowListener listener = new WindowAdapter() {
        @Override
        public void windowClosing(WindowEvent e) {
            super.windowClosing(e);
            int result = JOptionPane.showConfirmDialog(null,"DO YOU WANT CLOSE SERVER ?","EXIT SERVER",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);
            if (result == JOptionPane.YES_OPTION){
                System.exit(0);
                
            }

        }
    };
    public Server() {
        initComponents();
        addWindowListener(listener);
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        setLocationRelativeTo(null);
        setResizable(false);
        showFile();
//        initConnection();
    }
    
    public Server(Socket clientSocket){
        this.clientSocket = clientSocket;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TableServer = new javax.swing.JTable();
        OpenBt = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TableServer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Size"
            }
        ));
        jScrollPane1.setViewportView(TableServer);

        OpenBt.setText("Open Server");
        OpenBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenBtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(151, 151, 151)
                .addComponent(OpenBt)
                .addContainerGap(141, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(OpenBt)
                .addGap(0, 26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OpenBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenBtActionPerformed
        initConnection();
        
    }//GEN-LAST:event_OpenBtActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
    }
    private void showFile() {
        jFile = new JoinFile();
        model = (DefaultTableModel)TableServer.getModel();
        
        Object[] row = new Object[2];
        
        for(int i = 0; i < listFiles.length; i ++){
            row[0] = listFiles[i].getName();
//            row[1] = rootFile[i].length();
            model.addRow(row);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OpenBt;
    private javax.swing.JTable TableServer;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void initConnection() {
        try {
                server = new ServerSocket(2001);
            while(true){
                Socket socket =  server.accept();
                System.out.println("Connected");
                new Thread(new Server(socket)).start();
            }
        } catch (IOException ex) {
            System.out.println(ex);
        }
    }
    
    private void sendInfoServer(){
        try {
            ObjectOutputStream oos = new ObjectOutputStream(clientSocket.getOutputStream());
            ServerDirectory serverDirectory = new ServerDirectory(listFiles);
            oos.writeObject(serverDirectory);
        } catch (IOException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void listenToClient() throws IOException{
        DataInputStream dis = new DataInputStream(clientSocket.getInputStream());
        String request = dis.readUTF();
        if(request.equals("Upload")){  
            receiveFile();
        }else if(request.equals("Download")){
            sendFile();
        }
    }

    private void receiveFile() {
        ObjectInputStream ois;
            try {
                ois = new ObjectInputStream(clientSocket.getInputStream());
                FileInfo fileInfo = (FileInfo) ois.readObject();
                System.out.println(fileInfo.getPiecesOfFile());
                InputStream is = clientSocket.getInputStream();
                byte[] arr = new byte[1024*300];
                for (int i = 1; i <= fileInfo.getPiecesOfFile(); i++) {
                    int j = 0;
                    long a = 0;
    //                OutputStream os = new FileOutputStream(dest + sourceFile.getName() + "." + i);
                    OutputStream os = new FileOutputStream(des + fileInfo.getFileName()+ "." + i);
                    while ((j = is.read(arr)) != -1) {
                        os.write(arr, 0, j);
                        a += j;
                        if (a >= fileInfo.getPartLength()) {
                            break;
                        }
                    }
                    System.out.println("file cắt được "+fileInfo.getFileName()+"."+i);
                    os.flush();
                    os.close();
                }
                jFile.joinFile(des+fileInfo.getFileName()+".1");
            } catch (IOException ex) {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
//            } finally {
//                try {
//                    ois.close();
//                } catch (IOException ex) {
//                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
//                }
            }
    }

    private void sendFile() {
        try {
//            DataOutputStream dos = new DataOutputStream(clientSocket.getOutputStream());
//            dos.writeUTF("OK");
            DataInputStream dis = new DataInputStream(clientSocket.getInputStream());
            String path = dis.readUTF();
            SplitFile splitFile = new SplitFile();
        try {
            System.out.println(splitFile.splitFile(path, 1024 * 300, clientSocket));
        } catch (IOException | InterruptedException ex) {
            System.out.println(ex);
        }
        } catch (IOException ex) {
            System.out.println(ex);
        }
    }

    @Override
    public void run() {
        sendInfoServer();
        try {
                listenToClient();
        } catch (IOException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
